@startuml
class Network{
    Flow <> flow
    Node <> node
    int lmax 
    int lmin
}

class Flow{
    Path path
    int priority
    int deadline
    int period
    int jitter
    Flow<> higherPriorityFlow()
    Flow<> samePriorityFlow()
    Flow<> lowerPriorityFlow()
}

class Path{
    Node<> nodes
    Path subPathTo(Node) throws Exception
}

class Node{
    hash<F, int> capacity
}

class Algorithm{
    Network n
    Integer<> r
    Node firstNodeVisitedByJonI(Path J, Path I) trows Exception
    Node lastNodeVisitedByJonI(Path J, Path I) trows Exception	  Void ComputeWorstCaseEndToEndResponse() 
}

class XMLParser{
    Network loadNetwork(InputStream is)
}

Network "1" -- Algorithm
Network -- "*" Node
Network -- "*" Flow
Flow -- "1" Path
Path -- "*" Node


@enduml
