@startuml
class Network{
    Flow <> flow
    Node <> node
    int lmax 
    int lmin
    void init()
}

class Flow{
    Path path
    int priority
    int deadline
    int period
    int jitter
    Flow<> higherPriorityFlow
    Flow<> samePriorityFlow
    Flow<> lowerPriorityFlow
}

class Path{
    Node<> nodes
    Path subPathTo(Node) throws Exception
}

class Node{
    hash<F, int> capacity
}

class Algorithm{
    Network n
    Integer<> r
    Node firstNodeVisitedByJonI(Path J, Path I) trows Exception
    Node lastNodeVisitedByJonI(Path J, Path I) trows Exception	  Void ComputeWorstCaseEndToEndResponse() 
    int minTimeTakerFromSourceToH(Flow f, Node h) throws Exception
    int maxTimeTakerFromSourceToH(flow f, Node h) throws Exception
    Node slowestNodeVisitedByJonI(flow j, Flow i) throws Exception
    int computeM(Flow i, Node h) throws Exception
    int computeA(Flow i, Flow j) throws Exception
    int computeBetaSlow(Flow i)
    int computedelta(Flow i, Node h) throws Exception
    int computeW(Flow i, int t)
}

class XMLParser{
    Network loadNetwork(InputStream is)
}

Network "1" -- Algorithm
Network -- "*" Node
Network -- "*" Flow
Flow -- "1" Path
Path -- "*" Node


@enduml
